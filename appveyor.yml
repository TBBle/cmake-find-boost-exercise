# Sets the PLATFORM environment variable
platform:
  - x64
  - Win32

# Sets the CONFIGURATION environment variable
configuration:
  - Release
# - Debug

# https://www.appveyor.com/docs/build-environment/#boost
environment:
  global:
    # https://www.appveyor.com/docs/build-environment/#mingw-msys-cygwin
    MSYS_PATH: C:/msys64

  matrix:
      # Whatever msys2 happens to support today
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      GENERATOR: Ninja
      STATIC: OFF
      MSYS: ON
      MSYS_UPDATE: ON

      # Whatever msys2 happens to support when last updated
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      GENERATOR: Ninja
      STATIC: OFF
      MSYS: ON

    - BOOST_ROOT: C:/Libraries/boost_1_65_1
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      GENERATOR: Visual Studio 15 2017
      AUTOLINK: ON
      STATIC: ON

    - BOOST_ROOT: C:/Libraries/boost_1_64_0
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      GENERATOR: Visual Studio 15 2017
      AUTOLINK: ON
      STATIC: ON

    - BOOST_ROOT: C:/Libraries/boost_1_63_0
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      GENERATOR: Visual Studio 14 2015
      AUTOLINK: ON
      STATIC: ON

    - BOOST_ROOT: C:/Libraries/boost_1_62_0
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      GENERATOR: Visual Studio 14 2015
      AUTOLINK: ON
      STATIC: ON

    - BOOST_ROOT: C:/Libraries/boost_1_60_0
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      GENERATOR: Visual Studio 14 2015
      AUTOLINK: ON
      STATIC: ON

    - BOOST_ROOT: C:/Libraries/boost_1_59_0
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      GENERATOR: Visual Studio 14 2015
      AUTOLINK: ON
      STATIC: ON

    - BOOST_ROOT: C:/Libraries/boost_1_58_0
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      GENERATOR: Visual Studio 12 2013
      AUTOLINK: ON
      STATIC: ON

      # 1.56.0
    - BOOST_ROOT: C:/Libraries/boost
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      GENERATOR: Visual Studio 12 2013
      AUTOLINK: ON
      STATIC: ON

install:
  - ps: |
      if ($Env:MSYS -eq "ON")
      {
        $CMD_PREFIX="${Env:MSYS_PATH}/usr/bin/env MSYSTEM=MSYS /bin/bash -l -c"
        if ($Env:MSYS_UPDATE -eq "ON")
        {
          "$CMD_PREFIX 'pacman -Sy --noconfirm --noprogressbar'" | Invoke-Expression
          if ($LastExitCode -ne 0) { exit }
        }

        if ($Env:PLATFORM -eq "x64")
        {
          $PKG_PREFIX="mingw-w64-x86_64-"
        } else {
          $PKG_PREFIX="mingw-w64-i686-"
        }
        "$CMD_PREFIX 'pacman -S --needed --noconfirm --noprogressbar ${PKG_PREFIX}cmake ${PKG_PREFIX}boost ${PKG_PREFIX}gcc ${PKG_PREFIX}ninja'" | Invoke-Expression
        if ($LastExitCode -ne 0) { exit }
      }

build_script:
  - ps: |
      mkdir build
      cd build

      if ($Env:MSYS -eq "ON")
      {
        $MSYS_PWD=(Get-Location).Path -replace "\\", "/"
        if ($Env:PLATFORM -eq "x64")
        {
          $CMD_PREFIX="${Env:MSYS_PATH}/usr/bin/env MSYSTEM=MINGW64 /bin/bash -l -c 'cd $MSYS_PWD && "
        } else {
          $CMD_PREFIX="${Env:MSYS_PATH}/usr/bin/env MSYSTEM=MINGW32 /bin/bash -l -c 'cd $MSYS_PWD && "
        }
        $CMD_SUFFIX="'"
      }

      if ($Env:GENERATOR -eq "Ninja")
      {
        # Single-config generator
        ($CMD_PREFIX + "cmake .. -G `"${Env:GENERATOR}`" -DCMAKE_BUILD_TYPE=$Env:CONFIGURATION -DAUTOLINK=$Env:AUTOLINK -DSTATIC=$Env:STATIC" + $CMD_SUFFIX) | Invoke-Expression
        if ($LastExitCode -ne 0) { exit }
        ($CMD_PREFIX + "cmake --build ." + $CMD_SUFFIX) | Invoke-Expression
        if ($LastExitCode -ne 0) { exit }
      } else {
        # Multi-config generator
        ($CMD_PREFIX + "cmake .. -G `"${Env:GENERATOR}`" -A $Env:PLATFORM -DAUTOLINK=$Env:AUTOLINK -DSTATIC=$Env:STATIC" + $CMD_SUFFIX) | Invoke-Expression
        if ($LastExitCode -ne 0) { exit }
        ($CMD_PREFIX + "cmake --build . --config $Env:CONFIGURATION" + $CMD_SUFFIX) | Invoke-Expression
        if ($LastExitCode -ne 0) { exit }
      }

test_script:
  - ps: |
      # Already in build/ after the build script

      if ($Env:MSYS -eq "ON")
      {
        $MSYS_PWD=(Get-Location).Path -replace "\\", "/"
        if ($Env:PLATFORM -eq "x64")
        {
          $CMD_PREFIX="${Env:MSYS_PATH}/usr/bin/env MSYSTEM=MINGW64 /bin/bash -l -c 'cd $MSYS_PWD && "
        } else {
          $CMD_PREFIX="${Env:MSYS_PATH}/usr/bin/env MSYSTEM=MINGW32 /bin/bash -l -c 'cd $MSYS_PWD && "
        }
        $CMD_SUFFIX="'"
      }

      if ($Env:GENERATOR -eq "Ninja")
      {
        $BIN_PATH="./datetime_1.exe"
      } else {
        $BIN_PATH="${Env:CONFIGURATION}/datetime_1.exe"
      }

      if (Test-Path $BIN_PATH)
      {
        ($CMD_PREFIX + $BIN_PATH + $CMD_SUFFIX) | Invoke-Expression
        if ($LastExitCode -ne 0)
        {
          Add-AppveyorTest -Name datetime_1 -Framework None -FileName $BIN_PATH -Outcome Failed
        } else {
          Add-AppveyorTest -Name datetime_1 -Framework None -FileName $BIN_PATH -Outcome Passed
        }
      } else {
        Add-AppveyorTest -Name datetime_1 -Framework None -FileName $BIN_PATH -Outcome NotFound
      }
